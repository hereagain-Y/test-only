//This file contains median difficulty problems on LeetCode
vector<int> result;
    void inorder(TreeNode* root){
        if(root==nullptr)
            return;
        inorder(root->left);
        result.push_back(root->val);
        inorder(root->right);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        inorder(root);
        return result;
    }
    
    int triangleNumber(vector<int>& nums) {
        int count=0;
        if(nums.size()<3)
            return 0;
        sort(nums.begin(),nums.end());
        int n=nums.size();
        for(int i=n-1;i>=1;i--){
            int l = 0, r = i - 1;
            while (l < r) {
                if (nums[l] + nums[r] > nums[i]) {
                    count += r - l;
                    r--;
                }
                else
                    l++;
            }
        }
        return count;
    }
/*
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

Example 1
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

*/
