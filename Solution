class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        vector<int> data;
        for(int i=0;i<matrix.size();i++){
            for(int j=0;j<matrix[i].size();j++){
                data.push_back(matrix[i][j]);
            }
        }
        sort(data.begin(),data.end());
        return data[k-1];
    }
    string longestCommonPrefix(vector<string>& strs) {
        int min=100000;
        for(int i= 0;i<strs.size();i++){
            if(strs[i].length()<min)
                min=strs[i].length();
        }
        string result="";
        for(int i=0;i<min;i++){
            char temp=strs[0][i];
            for(int j=0;j<strs.size();j++){
                if(strs[j][i]!=temp)
                    return result;
            }
            result+=temp;
        }
        return result;
    }
    int lengthOfLIS(vector<int>& nums) {
        int n = (int)nums.size();
        if (n == 0) {
            return 0;
        }
        vector<int> dp(n, 0);
        for (int i = 0; i < n; ++i) {
            dp[i] = 1;
            for (int j = 0; j < i; ++j) {
                if (nums[j] < nums[i]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());
    }
    //check if the parentheses are valid
    bool isValid(string s) {
        stack<char> st;
        for(int i=0;i<s.length();i++){
            if(s[i]=='{')
                st.push(s[i]);
            else if(s[i]=='[')
                st.push(s[i]);
            else if(s[i]=='(')
                st.push(s[i]);
            else if(st.empty())
                return false;
            else if(st.top()=='{'&&s[i]=='}')
                st.pop();
            else if(st.top()=='['&&s[i]==']')
                st.pop();
            else if(st.top()=='('&&s[i]==')')
                st.pop();
            else
                return false;
        }
        if(st.empty())
            return true;
        else
            return false;
    }
    /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* head,*curr;
        if(l1==nullptr)
            return l2;
        else if(l2==nullptr)
            return l1;
        if(l1->val>l2->val){
            head=l2;
            l2=l2->next;
        }else{
            head=l1;
            l1=l1->next;
        }
        curr=head;
        while(l1&&l2){
            if(l1->val>l2->val){
                curr->next=l2;
                l2=l2->next;
            }else{
                curr->next=l1;
                l1=l1->next;
            }
            curr=curr->next;
        }
        if(l1==nullptr)
            curr->next=l2;
        else
            curr->next=l1;
        return head;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(!l1 && !l2){
            return NULL;
        }
        if(!l1){
            return l2;
        }
        if(!l2){
            return l1;
        }
        
        int carry =0;
        
        ListNode* result = NULL;
        ListNode* last = NULL ;
        while(l1 != NULL || l2!= NULL || carry > 0){
            int first = l1 ? l1->val : 0;
            int second = l2 ? l2->val : 0;
            
            int sum = first+ second+carry;
            int placeDigit = (sum) % 10;
            
            ListNode* pNew = new ListNode(placeDigit);
            
            carry = (sum)/10;
            
            if(result == NULL){
                result = pNew;  
            } else{
                last -> next = pNew;
            }
            
            last = pNew;
            
            if(l1) l1 = l1->next;
            if(l2) l2 = l2->next;
        }
        return result;
    }
    
    int removeElement(vector<int>& nums, int val) {
        int num=0;
        int size=nums.size();
        for(auto it=nums.begin();it<nums.end();it++){
            if(*it==val){
                nums.erase(it);
                it--;
                num++;
            }
        }
        return size-num;
    }
    string longestPalindrome(string s) {
        if (s.empty()) return "";
    if (s.size() == 1) return s;
    int min_start = 0, max_len = 1;
    for (int i = 0; i < s.size();) {
      if (s.size() - i <= max_len / 2) break;
      int j = i, k = i;
      while (k < s.size()-1 && s[k+1] == s[k]) ++k; // Skip duplicate characters.
      i = k+1;
      while (k < s.size()-1 && j > 0 && s[k + 1] == s[j - 1]) { ++k; --j; } // Expand.
      int new_len = k - j + 1;
      if (new_len > max_len) { min_start = j; max_len = new_len; }
    }
    return s.substr(min_start, max_len);
    }
    int lengthOfLongestSubstring(string s) {
        int i=0;
        int num=0,max=0;
        set<char> se;
        while(i<s.length()){
            num=0;
            se.clear();
            for(int j=i;j<s.length();j++){
                if(se.find(s[j])!=se.end()){
                    if(num>max)
                        max=num;
                    break;
                }else{
                    se.insert(s[j]);
                    num++;
                }
                if(num>max)
                    max=num;
            }
            i++;
        }
        return max;
    }
    
    string convert(string s, int nRows) {
        if (nRows <= 1)
                return s;

            const int len = (int)s.length();
            string *str = new string[nRows];

            int row = 0, step = 1;
            for (int i = 0; i < len; ++i)
            {
                str[row].push_back(s[i]);

                if (row == 0)
                    step = 1;
                else if (row == nRows - 1)
                    step = -1;

                row += step;
            }

            s.clear();
            for (int j = 0; j < nRows; ++j)
            {
                s.append(str[j]);
            }

            return s;
    }
    bool isIsomorphic(string s, string t) {
        int m=s.length(),n=t.length();
        if(s.length()!=t.length())   
            return false;
        bool marked[256] = {false};
        int map[256];
        memset(map, -1, sizeof(map));
        for (int i = 0; i < n; i++)
        {
            if (map[s[i]] == -1)
            {
                if (marked[t[i]] == true)
                    return false;
                marked[t[i]] = true;
                map[s[i]] = t[i];
            }
            else if (map[s[i]] != t[i])
                return false;
        }

        return true;
    }
    int maxLevelSum(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);
        int num;
        int index=1,max=root->val;
        map<int,int> mapper;
        while(!q.empty()){
            int n=q.size();
            num=0;
            while(n>0){
                TreeNode* p=q.front();
                q.pop();
                num+=p->val;
                //cout<<p->val<<" ";
                if(p->left!=nullptr)
                    q.push(p->left);
                if(p->right!=nullptr)
                    q.push(p->right);
                n--;
            }
            //cout<<endl;
            if(mapper.find(num)==mapper.end())
                mapper[num]=index;
            index++;
            if(num>max)
                max=num;
        }
        return mapper[max];
    }
    int findPeakElement(vector<int>& num) {
        int low = 0, high = num.size() - 1;
        while (low < high - 1) {
            int mid = (low + high) / 2;
            if (num[mid] > num[mid - 1] && num[mid] > num[mid + 1]) 
                return mid;
            else if (num[mid] > num[mid + 1]) 
                    high = mid - 1;
                 else 
                    low = mid + 1;    
        }
        return num[low] > num[high] ? low : high;
    }
};

//Another class for a relatively independent question
class MedianFinder {
public:
    MedianFinder() {}
    
    void addNum(int num) {
        nums.insert(num);
        is_even = !is_even;
        if (it == nums.end() || (is_even && (*it) <= num)) it++;
        if (!is_even && (*it) > num) it--;
    }
    
    double findMedian() {
        return (!is_even)? *it : (*it + *prev(it)) / 2.0;
    }
    
private:
    multiset<int> nums;
    multiset<int>::iterator it = nums.begin();
    bool is_even = true;
};
